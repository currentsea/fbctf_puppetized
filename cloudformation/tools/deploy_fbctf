#!/usr/bin/env python 
# Program: deploy_ctf 
# Deploys fbctf using cloudformation 

# The MIT License (MIT)

# Copyright (c) 2016 currentsea

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import boto3
import uuid
import sys
import re

STACK_NAME_PREFIX = "fbctf" 

def getUniqueIdentifier(): 
	myUuid = uuid.uuid4() 
	return str(myUuid)[0:8]

def getTemplateBody(templateFile="/Users/lightranger51/fbctf_puppetized/cloudformation/fbctf.json"): 
	templateBody = None
	with open(templateFile, "r") as templateFile: 
		templateBody = templateFile.read()
	return templateBody

def createStack(imageId): 
	client = boto3.client('cloudformation')
	#config = {}
	uniqueIdentifier = getUniqueIdentifier()
	stackName = STACK_NAME_PREFIX + "-" + uniqueIdentifier
	templateBody = getTemplateBody()
	#config["StackName"] = stackName
	print "STACK NAME: " + stackName
	print "UNIQUE IDENTIFIER: " + str(uniqueIdentifier)
	client.create_stack(    
		StackName=stackName,
	    TemplateBody=templateBody,
	    Parameters=[
	    	 {
	            'ParameterKey': 'ImageIdentifier',
	            'ParameterValue': imageId
        	}
	    ]
	)
	pass 
	
if __name__ == "__main__": 
	# imageId = os.environ["AMI_ID"] 
	argLength = len(sys.argv)
	if argLength < 2: 
		try: 
			print "Nothing declared in script arguments. Using value of $AMI_ID for deployment image..." 
			imageId = str(os.environ["AMI_ID"]) 
		except: 
			raise 
	else: 
		try: 
			amiArg = str(sys.argv[1])
			amiRegex = re.search("(ami-[0-9a-z]{8})", amiArg) 
			amiMatch = amiRegex.group(1) 
			amiMatch = amiMatch.strip()
			imageId = amiMatch
		except: 
			print "First argument to script must be an ami id (ami-[0-9a-z]{8})" 
			raise 

	# print getRandom()
	createStack(imageId)

